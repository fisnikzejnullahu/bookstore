// <auto-generated />
using System;
using BookStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookStore.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190214220502_SeedingNewCategoryAndSubject")]
    partial class SeedingNewCategoryAndSubject
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookStore.Models.Books.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Author");

                    b.Property<Guid>("CategorySubjectId");

                    b.Property<string>("Description");

                    b.Property<string>("Isbn");

                    b.Property<double>("Price");

                    b.Property<DateTime>("PublishedDate");

                    b.Property<string>("Thumbnail");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CategorySubjectId");

                    b.ToTable("Books");

                    b.HasData(
                        new { Id = new Guid("06195285-414f-4b2b-b953-495d2bf1dafc"), Active = true, Author = "Matt Frisbie", CategorySubjectId = new Guid("ed3fccb0-ae7a-4d72-a447-0830384eb8df"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-119-36644-7", Price = 38.5, PublishedDate = new DateTime(2018, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "professionaljs.jpg", Title = "Professional JavaScript for Web Developers, 4th Edition" },
                        new { Id = new Guid("4f739042-68c7-4617-bba1-5afe67038eed"), Active = true, Author = "T. J. Crowder", CategorySubjectId = new Guid("ed3fccb0-ae7a-4d72-a447-0830384eb8df"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-119-36795-6", Price = 25.7, PublishedDate = new DateTime(2018, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "jsnewtoys.jpg", Title = "JavaScript: The New Toys" },
                        new { Id = new Guid("dea8e2d6-c66e-45cd-aaed-2b55a7ed643a"), Active = true, Author = "Ivor Horton", CategorySubjectId = new Guid("ed3fccb0-ae7a-4d72-a447-0830384eb8df"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-118-17341-1", Price = 30.99, PublishedDate = new DateTime(2018, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "java.jpg", Title = "Ivor Horton's Beginning Java, Java 7 Edition" },
                        new { Id = new Guid("e0c12a42-fa5a-4ba3-82fb-cb0a5e5fd6f8"), Active = true, Author = "Christian Nagel", CategorySubjectId = new Guid("ed3fccb0-ae7a-4d72-a447-0830384eb8df"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-119-44926-3", Price = 38.99, PublishedDate = new DateTime(2018, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "c7.jpg", Title = "Professional C# 7 and .NET Core 2.0" },
                        new { Id = new Guid("b49d45cb-c75b-4462-958b-2afa48de90ed"), Active = true, Author = "Jon Duckett", CategorySubjectId = new Guid("ed3fccb0-ae7a-4d72-a447-0830384eb8df"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-118-20691-1", Price = 19.99, PublishedDate = new DateTime(2018, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "htmlcss.jpg", Title = "HTML and CSS: Design and Build Websites" },
                        new { Id = new Guid("28b9291e-5152-41d3-8811-c7f6d5956d2f"), Active = true, Author = "Hans-Jurgen Steffens, Christian Zollner, Kathrin Muhlmann", CategorySubjectId = new Guid("ed3fccb0-ae7a-4d72-a447-0830384eb8df"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-3-527-71520-6", Price = 25.5, PublishedDate = new DateTime(2018, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "3527715207.jpg", Title = "Mathematik fur Informatiker fur Dummies" },
                        new { Id = new Guid("a7921958-57a8-423f-b1a0-240874036614"), Active = true, Author = "Ute Schmid, Michael Siebers, Katharina Weitz", CategorySubjectId = new Guid("ed3fccb0-ae7a-4d72-a447-0830384eb8df"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-3-527-71573-2", Price = 12.5, PublishedDate = new DateTime(2018, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "3527715738.jpg", Title = "Kunstliche Intelligenz selber programmieren fur Dummies Junior" },
                        new { Id = new Guid("8772a500-10d9-4a03-a0ef-e316404b6cbf"), Active = true, Author = "Frank Geisler, Benjamin Kettner", CategorySubjectId = new Guid("ed3fccb0-ae7a-4d72-a447-0830384eb8df"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-3-527-71607-4", Price = 25.5, PublishedDate = new DateTime(2018, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "no_image_available.jpg", Title = "Docker fur Dummies" },
                        new { Id = new Guid("0adb67eb-c0eb-4ad6-bf27-d8c4bcb52f57"), Active = true, Author = "Eric T. Jones, Eric Butow", CategorySubjectId = new Guid("ed3fccb0-ae7a-4d72-a447-0830384eb8df"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-119-56502-4", Price = 21.4, PublishedDate = new DateTime(2018, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "1119565022.jpg", Title = "Programming Interviews For Dummies" },
                        new { Id = new Guid("d1b53bb4-ef9a-4895-83f4-0f7e1b661b85"), Active = true, Author = "Sarah Guthals", CategorySubjectId = new Guid("ed3fccb0-ae7a-4d72-a447-0830384eb8df"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-119-57267-1", Price = 25.7, PublishedDate = new DateTime(2018, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "1119572673.jpg", Title = "GitHub For Dummies" },
                        new { Id = new Guid("ff7984de-59c8-4aff-a4fc-e1a41cea9d0f"), Active = true, Author = "Alissa Knight", CategorySubjectId = new Guid("ed3fccb0-ae7a-4d72-a447-0830384eb8df"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-119-49180-4", Price = 42.8, PublishedDate = new DateTime(2018, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "1119491800.jpg", Title = "Hacking Connected Cars: Tactics, Techniques, and Procedures" },
                        new { Id = new Guid("d7f1dc2e-2d09-4470-874d-6f35ff6cb349"), Active = true, Author = "Perry Carpenter", CategorySubjectId = new Guid("ed3fccb0-ae7a-4d72-a447-0830384eb8df"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-119-56634-2", Price = 25.7, PublishedDate = new DateTime(2018, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "1119566347.jpg", Title = "Transformational Security Awareness: What Neuroscientists, Storytellers, and Marketers Can Teach Us About Driving Secure Behaviors" },
                        new { Id = new Guid("4d604d9d-1ccb-4f6c-a247-0576b9c4bb5f"), Active = true, Author = "Marco L. Napoli", CategorySubjectId = new Guid("ed3fccb0-ae7a-4d72-a447-0830384eb8df"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-119-55082-2", Price = 34.2, PublishedDate = new DateTime(2018, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "1119550823.jpg", Title = "Beginning Flutter: A Hands On Guide To App Development" },
                        new { Id = new Guid("4b544767-fdc1-4501-a890-872604fe8f32"), Active = true, Author = "Shirley Carlon, Rosina McAlpine, Chrisann Lee, Lorena Mitrione, Ngaire Kirk, Lily Wong", CategorySubjectId = new Guid("ca48a5d5-a111-4a6d-b31a-330751fbbe8f"), Description = "Financial Accounting, 6th Edition presents accounting in a cutting-edge interactive digital format designed to motivate students by taking the road blocks out of self-study and to facilitate mastery though drill-and-skill practice.", Isbn = "978-0-730-36327-9", Price = 76.3, PublishedDate = new DateTime(2018, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "0730363279.jpg", Title = "Financial Accounting: Reporting, Analysis And Decision Making, 6th Edition" }
                    );
                });

            modelBuilder.Entity("BookStore.Models.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = new Guid("ae2b194e-21dd-4de3-85f6-d0dcb7c5de12"), Name = "Computing" },
                        new { Id = new Guid("65ded186-d558-46b3-8d6a-bff74c93ed44"), Name = "Business & Management" }
                    );
                });

            modelBuilder.Entity("BookStore.Models.CategorySubjects.CategorySubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategorySubjects");

                    b.HasData(
                        new { Id = new Guid("ed3fccb0-ae7a-4d72-a447-0830384eb8df"), CategoryId = new Guid("ae2b194e-21dd-4de3-85f6-d0dcb7c5de12"), Name = "General & Introductory Computer Science" },
                        new { Id = new Guid("ca48a5d5-a111-4a6d-b31a-330751fbbe8f"), CategoryId = new Guid("65ded186-d558-46b3-8d6a-bff74c93ed44"), Name = "Accounting" }
                    );
                });

            modelBuilder.Entity("BookStore.Models.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BookStore.Models.Comments.CommentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CommentId");

                    b.Property<DateTime>("EditedTime");

                    b.Property<string>("Message");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentHistories");
                });

            modelBuilder.Entity("BookStore.Models.Comments.CommentUser", b =>
                {
                    b.Property<Guid>("CommentId");

                    b.Property<string>("UserId");

                    b.HasKey("CommentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentUser");
                });

            modelBuilder.Entity("BookStore.Models.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("OrderDate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BookStore.Models.OrdersBooks.OrderBook", b =>
                {
                    b.Property<Guid>("BookId");

                    b.Property<Guid>("OrderId");

                    b.Property<int>("Quantity");

                    b.HasKey("BookId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrdersBooks");
                });

            modelBuilder.Entity("BookStore.Models.Rates.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookId");

                    b.Property<string>("UserId");

                    b.Property<byte>("Value");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "78BB9A69-D214-40A3-B9BD-0344B851D76B", AccessFailedCount = 0, ConcurrencyStamp = "8959f70c-c042-4ac8-95f6-ee98771c7b9b", Email = "fisnikz@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "fisnikz@gmail.com", NormalizedUserName = "fisnikz@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAENVtJrYnPus2lX1ggxRTN44gIstNO0CXrwxesRcX2CoA4crj7ZaJ+bNVPSnHP6V41A==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "fisnikz@gmail.com" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BookStore.Models.Books.Book", b =>
                {
                    b.HasOne("BookStore.Models.CategorySubjects.CategorySubject", "CategorySubject")
                        .WithMany("Books")
                        .HasForeignKey("CategorySubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.Models.CategorySubjects.CategorySubject", b =>
                {
                    b.HasOne("BookStore.Models.Categories.Category", "Category")
                        .WithMany("Subjects")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.Models.Comments.Comment", b =>
                {
                    b.HasOne("BookStore.Models.Books.Book", "Book")
                        .WithMany("Comments")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");
                });

            modelBuilder.Entity("BookStore.Models.Comments.CommentHistory", b =>
                {
                    b.HasOne("BookStore.Models.Comments.Comment", "Comment")
                        .WithMany("CommentHistory")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.Models.Comments.CommentUser", b =>
                {
                    b.HasOne("BookStore.Models.Comments.Comment", "Comment")
                        .WithMany("CommentUsers")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.Models.Orders.Order", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BookStore.Models.OrdersBooks.OrderBook", b =>
                {
                    b.HasOne("BookStore.Models.Books.Book", "Book")
                        .WithMany("OrderBook")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookStore.Models.Orders.Order", "Order")
                        .WithMany("OrderBook")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.Models.Rates.Rate", b =>
                {
                    b.HasOne("BookStore.Models.Books.Book", "Book")
                        .WithMany("Rates")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
