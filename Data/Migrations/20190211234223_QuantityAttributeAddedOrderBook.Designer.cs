// <auto-generated />
using System;
using BookStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookStore.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190211234223_QuantityAttributeAddedOrderBook")]
    partial class QuantityAttributeAddedOrderBook
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookStore.Models.Books.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Author");

                    b.Property<Guid>("CategorySubjectId");

                    b.Property<string>("Description");

                    b.Property<string>("Isbn");

                    b.Property<double>("Price");

                    b.Property<DateTime>("PublishedDate");

                    b.Property<string>("Thumbnail");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CategorySubjectId");

                    b.ToTable("Books");

                    b.HasData(
                        new { Id = new Guid("4e785945-b29b-4106-af23-8da2cf6a96ec"), Active = true, Author = "Matt Frisbie", CategorySubjectId = new Guid("ba00f0dc-51e3-4633-9a28-42b1c864fbcb"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-119-36644-7", Price = 38.5, PublishedDate = new DateTime(2019, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "professionaljs.jpg", Title = "Professional JavaScript for Web Developers, 4th Edition" },
                        new { Id = new Guid("39c7ceb7-edc8-4de1-8294-a7ff3da80d92"), Active = true, Author = "T. J. Crowder", CategorySubjectId = new Guid("ba00f0dc-51e3-4633-9a28-42b1c864fbcb"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-119-36795-6", Price = 25.7, PublishedDate = new DateTime(2019, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "jsnewtoys.jpg", Title = "JavaScript: The New Toys" },
                        new { Id = new Guid("ef8fabf5-623c-4961-844c-252123c82bea"), Active = true, Author = "Ivor Horton", CategorySubjectId = new Guid("ba00f0dc-51e3-4633-9a28-42b1c864fbcb"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-118-17341-1", Price = 30.99, PublishedDate = new DateTime(2019, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "java.jpg", Title = "Ivor Horton's Beginning Java, Java 7 Edition" },
                        new { Id = new Guid("4a362820-9fd9-42c3-9307-4695419528d6"), Active = true, Author = "Christian Nagel", CategorySubjectId = new Guid("ba00f0dc-51e3-4633-9a28-42b1c864fbcb"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-119-44926-3", Price = 38.99, PublishedDate = new DateTime(2019, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "c7.jpg", Title = "Professional C# 7 and .NET Core 2.0" },
                        new { Id = new Guid("6f23788d-48a5-4041-ab29-c64fc5ee9b5a"), Active = true, Author = "Jon Duckett", CategorySubjectId = new Guid("ba00f0dc-51e3-4633-9a28-42b1c864fbcb"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-118-20691-1", Price = 19.99, PublishedDate = new DateTime(2019, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "htmlcss.jpg", Title = "HTML and CSS: Design and Build Websites" },
                        new { Id = new Guid("ea1e5a95-65d5-4070-896b-283c3251f019"), Active = true, Author = "Hans-Jurgen Steffens, Christian Zollner, Kathrin Muhlmann", CategorySubjectId = new Guid("ba00f0dc-51e3-4633-9a28-42b1c864fbcb"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-3-527-71520-6", Price = 25.5, PublishedDate = new DateTime(2019, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "3527715207.jpg", Title = "Mathematik fur Informatiker fur Dummies" },
                        new { Id = new Guid("a435c7fc-5c39-4a07-97ef-aa32770a7acf"), Active = true, Author = "Ute Schmid, Michael Siebers, Katharina Weitz", CategorySubjectId = new Guid("ba00f0dc-51e3-4633-9a28-42b1c864fbcb"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-3-527-71573-2", Price = 12.5, PublishedDate = new DateTime(2019, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "3527715738.jpg", Title = "Kunstliche Intelligenz selber programmieren fur Dummies Junior" },
                        new { Id = new Guid("2965f9fa-f19d-4752-b3bb-4f90489368d9"), Active = true, Author = "Frank Geisler, Benjamin Kettner", CategorySubjectId = new Guid("ba00f0dc-51e3-4633-9a28-42b1c864fbcb"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-3-527-71607-4", Price = 25.5, PublishedDate = new DateTime(2019, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "no_image_available.jpg", Title = "Docker fur Dummies" },
                        new { Id = new Guid("85fefddf-2bbd-45ee-ba38-94850acf3ce4"), Active = true, Author = "Eric T. Jones, Eric Butow", CategorySubjectId = new Guid("ba00f0dc-51e3-4633-9a28-42b1c864fbcb"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-119-56502-4", Price = 21.4, PublishedDate = new DateTime(2019, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "1119565022.jpg", Title = "Programming Interviews For Dummies" },
                        new { Id = new Guid("2336a10d-41fd-4e99-a9e5-bd52c0ad62bd"), Active = true, Author = "Sarah Guthals", CategorySubjectId = new Guid("ba00f0dc-51e3-4633-9a28-42b1c864fbcb"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-119-57267-1", Price = 25.7, PublishedDate = new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "1119572673.jpg", Title = "GitHub For Dummies" },
                        new { Id = new Guid("04ab9a5b-494d-4ee2-9780-891e872d0f7b"), Active = true, Author = "Alissa Knight", CategorySubjectId = new Guid("ba00f0dc-51e3-4633-9a28-42b1c864fbcb"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-119-49180-4", Price = 42.8, PublishedDate = new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "1119491800.jpg", Title = "Hacking Connected Cars: Tactics, Techniques, and Procedures" },
                        new { Id = new Guid("f306d2f2-ea29-4c82-aa91-dd3e6f6023b1"), Active = true, Author = "Perry Carpenter", CategorySubjectId = new Guid("ba00f0dc-51e3-4633-9a28-42b1c864fbcb"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-119-56634-2", Price = 25.7, PublishedDate = new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "1119566347.jpg", Title = "Transformational Security Awareness: What Neuroscientists, Storytellers, and Marketers Can Teach Us About Driving Secure Behaviors" },
                        new { Id = new Guid("f6f27ad9-f27c-412a-a4c3-bb649f2cb2c5"), Active = true, Author = "Marco L. Napoli", CategorySubjectId = new Guid("ba00f0dc-51e3-4633-9a28-42b1c864fbcb"), Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.", Isbn = "978-1-119-55082-2", Price = 34.2, PublishedDate = new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Thumbnail = "1119550823.jpg", Title = "Beginning Flutter: A Hands On Guide To App Development" }
                    );
                });

            modelBuilder.Entity("BookStore.Models.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = new Guid("540bc9e4-4c19-406f-b512-52ab5ac0beaa"), Name = "Computing" }
                    );
                });

            modelBuilder.Entity("BookStore.Models.CategorySubjects.CategorySubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategorySubjects");

                    b.HasData(
                        new { Id = new Guid("ba00f0dc-51e3-4633-9a28-42b1c864fbcb"), CategoryId = new Guid("540bc9e4-4c19-406f-b512-52ab5ac0beaa"), Name = "General & Introductory Computer Science" }
                    );
                });

            modelBuilder.Entity("BookStore.Models.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BookStore.Models.Comments.CommentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CommentId");

                    b.Property<DateTime>("EditedTime");

                    b.Property<string>("Message");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentHistories");
                });

            modelBuilder.Entity("BookStore.Models.Comments.CommentUser", b =>
                {
                    b.Property<Guid>("CommentId");

                    b.Property<string>("UserId");

                    b.HasKey("CommentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentUser");
                });

            modelBuilder.Entity("BookStore.Models.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("OrderDate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BookStore.Models.OrdersBooks.OrderBook", b =>
                {
                    b.Property<Guid>("BookId");

                    b.Property<Guid>("OrderId");

                    b.Property<int>("Quantity");

                    b.HasKey("BookId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrdersBooks");
                });

            modelBuilder.Entity("BookStore.Models.Rates.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookId");

                    b.Property<string>("UserId");

                    b.Property<byte>("Value");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "78BB9A69-D214-40A3-B9BD-0344B851D76B", AccessFailedCount = 0, ConcurrencyStamp = "a822c9fa-398f-4b45-99da-46ee56b2b338", Email = "fisnikz@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "fisnikz@gmail.com", NormalizedUserName = "fisnikz@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEHNXYzsCHyn8LD0JPMs0Vdqa7Q2vqXxVmYBxP886NOjHMixD0QZS+dgVHyOOaLMCAw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "fisnikz@gmail.com" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BookStore.Models.Books.Book", b =>
                {
                    b.HasOne("BookStore.Models.CategorySubjects.CategorySubject", "CategorySubject")
                        .WithMany("Books")
                        .HasForeignKey("CategorySubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.Models.CategorySubjects.CategorySubject", b =>
                {
                    b.HasOne("BookStore.Models.Categories.Category", "Category")
                        .WithMany("Subjects")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.Models.Comments.Comment", b =>
                {
                    b.HasOne("BookStore.Models.Books.Book", "Book")
                        .WithMany("Comments")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");
                });

            modelBuilder.Entity("BookStore.Models.Comments.CommentHistory", b =>
                {
                    b.HasOne("BookStore.Models.Comments.Comment", "Comment")
                        .WithMany("CommentHistory")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.Models.Comments.CommentUser", b =>
                {
                    b.HasOne("BookStore.Models.Comments.Comment", "Comment")
                        .WithMany("CommentUsers")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.Models.Orders.Order", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BookStore.Models.OrdersBooks.OrderBook", b =>
                {
                    b.HasOne("BookStore.Models.Books.Book", "Book")
                        .WithMany("OrderBook")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookStore.Models.Orders.Order", "Order")
                        .WithMany("OrderBook")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.Models.Rates.Rate", b =>
                {
                    b.HasOne("BookStore.Models.Books.Book", "Book")
                        .WithMany("Rates")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
